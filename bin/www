#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('anything:server');
var http = require('http');
var websocket = require('socket.io');

/**
 * Get port from environment and store in Express.
 */
//Configurations
var config = require('../env.json')[process.env.NODE_ENV || 'development'];

var port = normalizePort(config.PORT || process.env.PORT || '8080');
app.set('port', port);
console.log("Your app is running in - http://localhost:"+port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);
var timeout = normalizePort(config.TIME_OUT || process.env.TIME_OUT || 5);
server['close timeout'] = timeout;
/**
 * Socket.io
 */

var io     = app.io
io.attach( server );

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val)
{
	var port = parseInt(val, 10);
	if (isNaN(port))
	{
		// named pipe
		return val;
	}
	if (port >= 0)
	{
		// port number
		return port;
	}
	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error)
{
	if (error.syscall !== 'listen')
	{
		throw error;
	}
	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;
	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening()
{
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}
